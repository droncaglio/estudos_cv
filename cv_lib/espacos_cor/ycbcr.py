# cv_lib/espacos_cor/ycbcr.py
"""
üì∫ Convers√µes RGB ‚Üî YCbCr (Lumin√¢ncia + Cromin√¢ncia)

YCbCr separa informa√ß√£o de brilho (Y) da informa√ß√£o de cor (Cb, Cr),
fundamental para compress√£o de v√≠deo e TV digital.

Componentes:
- Y: Lumin√¢ncia (brilho) - similar ao que vemos em P&B
- Cb: Cromin√¢ncia azul-amarelo (Blue-Yellow chroma)  
- Cr: Cromin√¢ncia vermelho-verde (Red-Green chroma)

Aplica√ß√µes:
- Compress√£o JPEG/MPEG (reduz resolu√ß√£o Cb/Cr)
- TV digital e broadcasting
- Detec√ß√£o de pele (componentes Cb/Cr robustas)
- Processamento independente de lumin√¢ncia e cor

Refer√™ncias:
- ITU-R BT.601: Studio Encoding Parameters
- JPEG Standard (ISO/IEC 10918)
- Poynton, C. (2003). Digital Video and HDTV
"""

import numpy as np
from ..utils.validacao import validar_imagem_rgb, garantir_uint8


def rgb_para_ycbcr(imagem_rgb):
    """
    Converte imagem RGB para espa√ßo de cor YCbCr (lumin√¢ncia + cromin√¢ncia).
    
    Args:
        imagem_rgb: Array RGB shape (altura, largura, 3)
        
    Returns:
        np.ndarray: Imagem YCbCr shape (altura, largura, 3) dtype uint8
    
    F√≥rmulas ITU-R BT.601:
        Y  = 0.299*R + 0.587*G + 0.114*B      (lumin√¢ncia)
        Cb = -0.169*R - 0.331*G + 0.500*B + 128  (azul-amarelo)
        Cr = 0.500*R - 0.419*G - 0.081*B + 128   (vermelho-verde)
    
    Por que +128? Para centralizar os valores de cromin√¢ncia no meio 
    do range [0-255], j√° que Cb e Cr podem ser negativos.
    
    Aplica√ß√µes:
        - Compress√£o de v√≠deo/imagem (JPEG subsample Cb/Cr)
        - Separa√ß√£o de lumin√¢ncia e cor para processamento independente
        - TV digital e broadcasting
        - Detec√ß√£o de pele humana (usando componentes Cb/Cr)
    """
    altura, largura, canais = validar_imagem_rgb(imagem_rgb, "imagem_rgb")
    imagem_ycbcr = np.zeros((altura, largura, 3), dtype=np.float64)

    for y in range(altura):
        for x in range(largura):
            r, g, b = imagem_rgb[y, x, 0], imagem_rgb[y, x, 1], imagem_rgb[y, x, 2]
            
            # Calcula componentes YCbCr usando f√≥rmulas ITU-R BT.601
            Y = 0.299 * r + 0.587 * g + 0.114 * b
            Cb = -0.169 * r - 0.331 * g + 0.500 * b + 128
            Cr = 0.500 * r - 0.419 * g - 0.081 * b + 128
            
            imagem_ycbcr[y, x] = [Y, Cb, Cr]

    # Garante valores no intervalo [0, 255]
    imagem_ycbcr = np.clip(imagem_ycbcr, 0, 255)
    return garantir_uint8(imagem_ycbcr)


def ycbcr_para_rgb(imagem_ycbcr):
    """
    Converte imagem YCbCr de volta para RGB.
    
    Args:
        imagem_ycbcr: Array YCbCr shape (altura, largura, 3)
        
    Returns:
        np.ndarray: Imagem RGB shape (altura, largura, 3) dtype uint8
    
    F√≥rmulas inversas ITU-R BT.601:
        R = Y + 1.402*(Cr-128)
        G = Y - 0.344*(Cb-128) - 0.714*(Cr-128)  
        B = Y + 1.772*(Cb-128)
        
    Nota: A convers√£o n√£o √© perfeitamente revers√≠vel devido a:
        - Arredondamentos em ponto flutuante
        - Clipping para range [0-255]
        - Quantiza√ß√£o uint8
    """
    altura, largura, _ = imagem_ycbcr.shape
    imagem_rgb = np.zeros((altura, largura, 3), dtype=np.float64)

    for y in range(altura):
        for x in range(largura):
            Y, Cb, Cr = imagem_ycbcr[y, x, 0], imagem_ycbcr[y, x, 1], imagem_ycbcr[y, x, 2]
            
            # Converte de volta para RGB usando f√≥rmulas inversas
            R = Y + 1.402 * (Cr - 128)
            G = Y - 0.344 * (Cb - 128) - 0.714 * (Cr - 128)
            B = Y + 1.772 * (Cb - 128)
            
            imagem_rgb[y, x] = [R, G, B]

    # Garante valores no intervalo [0, 255]
    imagem_rgb = np.clip(imagem_rgb, 0, 255)
    return garantir_uint8(imagem_rgb)


def extrair_luminancia(imagem_rgb):
    """
    Extrai apenas o canal de lumin√¢ncia (Y) de uma imagem RGB.
    
    Args:
        imagem_rgb: Array RGB shape (altura, largura, 3)
        
    Returns:
        np.ndarray: Canal Y shape (altura, largura) dtype uint8
        
    Equivalente a rgb_para_cinza(imagem, tipo='luminancia') mas mais
    sem√¢nticamente claro quando o objetivo √© obter lumin√¢ncia YCbCr.
    """
    altura, largura, _ = validar_imagem_rgb(imagem_rgb)
    luminancia = np.zeros((altura, largura), dtype=np.float64)
    
    for y in range(altura):
        for x in range(largura):
            r, g, b = imagem_rgb[y, x, 0], imagem_rgb[y, x, 1], imagem_rgb[y, x, 2]
            luminancia[y, x] = 0.299 * r + 0.587 * g + 0.114 * b
    
    return garantir_uint8(luminancia)


def extrair_crominancia(imagem_rgb, componente='cb'):
    """
    Extrai apenas um canal de cromin√¢ncia de uma imagem RGB.
    
    Args:
        imagem_rgb: Array RGB shape (altura, largura, 3)
        componente: 'cb' (azul-amarelo) ou 'cr' (vermelho-verde)
        
    Returns:
        np.ndarray: Canal Cb ou Cr shape (altura, largura) dtype uint8
        
    √ötil para:
        - An√°lise isolada de informa√ß√£o de cor
        - Detec√ß√£o de pele (Cb/Cr s√£o robustas a mudan√ßas de ilumina√ß√£o)
        - Estudos de compress√£o (JPEG reduz resolu√ß√£o destes canais)
    """
    if componente not in ['cb', 'cr']:
        raise ValueError("Componente deve ser 'cb' ou 'cr'")
        
    altura, largura, _ = validar_imagem_rgb(imagem_rgb)
    crominancia = np.zeros((altura, largura), dtype=np.float64)
    
    for y in range(altura):
        for x in range(largura):
            r, g, b = imagem_rgb[y, x, 0], imagem_rgb[y, x, 1], imagem_rgb[y, x, 2]
            
            if componente == 'cb':
                # Cb: Cromin√¢ncia azul-amarelo
                valor = -0.169 * r - 0.331 * g + 0.500 * b + 128
            else:  # componente == 'cr'
                # Cr: Cromin√¢ncia vermelho-verde  
                valor = 0.500 * r - 0.419 * g - 0.081 * b + 128
                
            crominancia[y, x] = valor
    
    crominancia = np.clip(crominancia, 0, 255)
    return garantir_uint8(crominancia)


def obter_coeficientes_ycbcr():
    """
    Retorna os coeficientes da transforma√ß√£o RGB‚ÜíYCbCr (BT.601).
    
    Returns:
        dict: Coeficientes organizados por componente
        
    √ötil para:
        - Implementa√ß√µes matriciais/vetorizadas
        - An√°lise te√≥rica das transforma√ß√µes
        - Compara√ß√£o com outros padr√µes
    """
    return {
        'Y': {'R': 0.299, 'G': 0.587, 'B': 0.114},
        'Cb': {'R': -0.169, 'G': -0.331, 'B': 0.500, 'offset': 128},
        'Cr': {'R': 0.500, 'G': -0.419, 'B': -0.081, 'offset': 128}
    }