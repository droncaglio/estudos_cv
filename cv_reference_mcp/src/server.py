"""
Servidor MCP Principal para Consulta de Refer√™ncias de CV

Este m√≥dulo implementa o servidor MCP (Model Context Protocol) que exp√µe
recursos e ferramentas para consulta sem√¢ntica das refer√™ncias bibliogr√°ficas
de Vis√£o Computacional.

Funcionalidades dispon√≠veis:
- Recursos para busca sem√¢ntica e conceitos espec√≠ficos
- Ferramentas para consultas interativas
- Integra√ß√£o com Claude Code via MCP
"""

import asyncio
import logging
import sys
from pathlib import Path
from typing import Dict, Any, List, Optional

from mcp.server.fastmcp import FastMCP
from pydantic import BaseModel

from .config import config
from .pdf_processor import PDFProcessor
from .vector_store import VectorStore
from .query_handler import QueryHandler, FormattedResponse


# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# Modelos para valida√ß√£o de entrada
class QueryRequest(BaseModel):
    """Modelo para requisi√ß√µes de consulta"""
    query: str
    top_k: Optional[int] = None
    book_filter: Optional[str] = None
    similarity_threshold: Optional[float] = None


class ConceptRequest(BaseModel):
    """Modelo para requisi√ß√µes de conceito espec√≠fico"""
    concept: str


# Inst√¢ncia global do servidor MCP
mcp = FastMCP(config.server_name)

# Inst√¢ncias globais dos componentes principais
pdf_processor: Optional[PDFProcessor] = None
vector_store: Optional[VectorStore] = None
query_handler: Optional[QueryHandler] = None


async def initialize_system() -> bool:
    """
    Inicializa todo o sistema MCP
    
    Returns:
        True se inicializa√ß√£o bem-sucedida, False caso contr√°rio
    """
    global pdf_processor, vector_store, query_handler
    
    logger.info("üöÄ Inicializando CV Reference MCP Server...")
    
    try:
        # Inicializar processador de PDFs
        pdf_processor = PDFProcessor()
        logger.info("‚úÖ PDF Processor inicializado")
        
        # Inicializar Vector Store
        vector_store = VectorStore()
        
        # Tentar carregar √≠ndice existente
        if vector_store.load_index():
            logger.info("‚úÖ √çndice FAISS carregado do disco")
        else:
            # Se n√£o existir, processar PDFs e criar √≠ndice
            logger.info("üìö Nenhum √≠ndice encontrado, processando PDFs...")
            
            # Verificar se h√° PDFs para processar
            pdf_files = list(config.pdfs_dir.glob("*.pdf"))
            if not pdf_files:
                logger.warning(f"‚ö†Ô∏è Nenhum PDF encontrado em {config.pdfs_dir}")
                logger.info("üìù Coloque os PDFs das refer√™ncias no diret√≥rio 'data/pdfs/'")
                return False
            
            # Processar todos os PDFs
            chunks = pdf_processor.process_all_pdfs()
            if not chunks:
                logger.error("‚ùå Falha ao processar PDFs")
                return False
            
            # Construir √≠ndice FAISS
            vector_store.build_index(chunks)
            
            # Salvar √≠ndice para uso futuro
            vector_store.save_index()
            
            logger.info(f"‚úÖ √çndice FAISS criado com {len(chunks)} chunks")
        
        # Inicializar Query Handler
        query_handler = QueryHandler(vector_store)
        logger.info("‚úÖ Query Handler inicializado")
        
        # Verificar se sistema est√° pronto
        if not vector_store.is_ready():
            logger.error("‚ùå Sistema n√£o est√° pronto para uso")
            return False
        
        # Log das estat√≠sticas do sistema
        stats = vector_store.get_stats()
        books = vector_store.list_books()
        
        logger.info(f"üìä Sistema pronto:")
        logger.info(f"  - Documentos indexados: {stats.total_documents}")
        logger.info(f"  - Dimens√£o dos embeddings: {stats.index_dimension}")
        logger.info(f"  - Livros dispon√≠veis: {len(books)}")
        
        for book_code, book_info in books.items():
            logger.info(f"    ‚Ä¢ {book_info['book_title']}: {book_info['chunk_count']} chunks")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na inicializa√ß√£o: {str(e)}")
        return False


# ============================================================================
# RECURSOS MCP (Resources)
# ============================================================================

@mcp.resource("cv-reference://search")
async def search_references() -> str:
    """
    Recurso para busca geral nas refer√™ncias
    
    Returns:
        Instru√ß√µes de uso da busca sem√¢ntica
    """
    if not query_handler:
        return "‚ùå Sistema n√£o inicializado. Execute o setup primeiro."
    
    # Estat√≠sticas do sistema
    books = query_handler.get_book_statistics()
    total_docs = sum(book['chunk_count'] for book in books.values())
    
    instructions = f"""# üìö Busca Sem√¢ntica em Refer√™ncias de CV

## Status do Sistema
- **Documentos indexados**: {total_docs}
- **Livros dispon√≠veis**: {len(books)}

## Livros Indexados:
"""
    
    for book_code, book_info in books.items():
        instructions += f"- **{book_info['book_title']}**: {book_info['chunk_count']} chunks ({book_info['page_count']} p√°ginas)\n"
    
    instructions += """
## Como Usar:
1. **Consulta geral**: Use a ferramenta `query_cv_references`
2. **Conceito espec√≠fico**: Use o recurso `cv-reference://concept/[conceito]`
3. **Livro espec√≠fico**: Adicione `book_filter` na consulta

## Exemplos de Consultas:
- "Como funciona o filtro gaussiano?"
- "Implementa√ß√£o do algoritmo de Canny"
- "Diferen√ßa entre SIFT e SURF"
- "Teoria matem√°tica de convolu√ß√£o"
"""
    
    return instructions


@mcp.resource("cv-reference://concept/{concept}")
async def get_concept_info(concept: str) -> str:
    """
    Recurso para informa√ß√µes sobre conceito espec√≠fico
    
    Args:
        concept: Nome do conceito a pesquisar
        
    Returns:
        Informa√ß√µes detalhadas sobre o conceito
    """
    if not query_handler:
        return "‚ùå Sistema n√£o inicializado."
    
    # Buscar informa√ß√µes sobre o conceito
    response = query_handler.get_concept_info(concept)
    
    if not response:
        available_concepts = query_handler.list_available_concepts()
        return f"""‚ùå Conceito '{concept}' n√£o encontrado.

üìù **Conceitos dispon√≠veis:**
{', '.join(available_concepts[:20])}
{'...' if len(available_concepts) > 20 else ''}

üí° **Dica:** Use nomes em portugu√™s como 'filtro-gaussiano', 'detec√ß√£o-bordas', etc.
"""
    
    # Formatar resposta do conceito
    result_text = f"# üìñ {concept.replace('-', ' ').title()}\n\n"
    
    if response.results:
        result_text += f"**{len(response.results)} refer√™ncia(s) encontrada(s)**\n\n"
        
        for i, result in enumerate(response.results[:3], 1):
            result_text += f"## {i}. {result['source']}\n"
            result_text += f"**Similaridade:** {result['similarity_score']}\n\n"
            result_text += f"{result['text'][:500]}...\n\n"
            result_text += "---\n\n"
    else:
        result_text += "‚ùå Nenhuma refer√™ncia espec√≠fica encontrada para este conceito.\n"
    
    return result_text


@mcp.resource("cv-reference://book/{book_name}")
async def get_book_info(book_name: str) -> str:
    """
    Recurso para informa√ß√µes sobre um livro espec√≠fico
    
    Args:
        book_name: C√≥digo ou nome do livro
        
    Returns:
        Informa√ß√µes detalhadas sobre o livro
    """
    if not query_handler:
        return "‚ùå Sistema n√£o inicializado."
    
    books = query_handler.get_book_statistics()
    
    # Tentar encontrar o livro pelo c√≥digo ou nome
    book_info = None
    book_code = None
    
    for code, info in books.items():
        if (book_name.lower() == code.lower() or 
            book_name.lower() in info['book_title'].lower()):
            book_info = info
            book_code = code
            break
    
    if not book_info:
        available_books = list(books.keys())
        return f"""‚ùå Livro '{book_name}' n√£o encontrado.

üìö **Livros dispon√≠veis:**
{', '.join(available_books)}
"""
    
    # Formatar informa√ß√µes do livro
    info_text = f"""# üìö {book_info['book_title']}

## Estat√≠sticas
- **Chunks indexados**: {book_info['chunk_count']}
- **Total de palavras**: {book_info['total_words']:,}
- **P√°ginas processadas**: {book_info['page_count']}
- **C√≥digo do livro**: `{book_code}`

## P√°ginas Indexadas
{', '.join(map(str, book_info['pages'][:10]))}{'...' if len(book_info['pages']) > 10 else ''}

## Como Consultar
Use a ferramenta `query_cv_references` com `book_filter="{book_code}"` para buscar apenas neste livro.

**Exemplo:**
```
query_cv_references(
    query="algoritmo de segmenta√ß√£o",
    book_filter="{book_code}"
)
```
"""
    
    return info_text


# ============================================================================
# FERRAMENTAS MCP (Tools)
# ============================================================================

@mcp.tool()
async def query_cv_references(
    query: str,
    top_k: int = 5,
    book_filter: Optional[str] = None,
    similarity_threshold: float = 0.3
) -> Dict[str, Any]:
    """
    Realiza consulta sem√¢ntica nas refer√™ncias de CV
    
    Args:
        query: Consulta em linguagem natural
        top_k: N√∫mero m√°ximo de resultados (1-20)
        book_filter: Filtrar por livro espec√≠fico (gonzalez, szeliski, goodfellow, bishop)
        similarity_threshold: Threshold m√≠nimo de similaridade (0.0-1.0)
        
    Returns:
        Resultados da consulta com contexto e sugest√µes
    """
    if not query_handler:
        return {"error": "Sistema n√£o inicializado"}
    
    # Validar par√¢metros
    top_k = max(1, min(top_k, config.max_top_k))
    similarity_threshold = max(0.0, min(similarity_threshold, 1.0))
    
    try:
        # Realizar consulta
        response = query_handler.search(
            query=query,
            top_k=top_k,
            book_filter=book_filter,
            similarity_threshold=similarity_threshold
        )
        
        # Converter para dicion√°rio para resposta MCP
        return response.dict()
        
    except Exception as e:
        logger.error(f"Erro na consulta: {str(e)}")
        return {
            "error": f"Erro na consulta: {str(e)}",
            "query": query,
            "total_results": 0,
            "results": [],
            "context": {},
            "suggestions": []
        }


@mcp.tool()
async def list_available_books() -> Dict[str, Any]:
    """
    Lista todos os livros dispon√≠veis para consulta
    
    Returns:
        Informa√ß√µes sobre os livros indexados
    """
    if not query_handler:
        return {"error": "Sistema n√£o inicializado"}
    
    try:
        books_stats = query_handler.get_book_statistics()
        
        return {
            "total_books": len(books_stats),
            "books": books_stats,
            "book_codes": list(books_stats.keys()),
            "total_documents": sum(book['chunk_count'] for book in books_stats.values())
        }
        
    except Exception as e:
        logger.error(f"Erro ao listar livros: {str(e)}")
        return {"error": f"Erro ao listar livros: {str(e)}"}


@mcp.tool()
async def get_system_stats() -> Dict[str, Any]:
    """
    Obt√©m estat√≠sticas detalhadas do sistema
    
    Returns:
        Estat√≠sticas completas do MCP server
    """
    if not vector_store or not query_handler:
        return {"error": "Sistema n√£o inicializado"}
    
    try:
        vector_stats = vector_store.get_stats()
        books_stats = query_handler.get_book_statistics()
        
        # Calcular estat√≠sticas gerais
        total_words = sum(book['total_words'] for book in books_stats.values())
        total_chunks = sum(book['chunk_count'] for book in books_stats.values())
        
        return {
            "server_info": {
                "name": config.server_name,
                "version": config.server_version,
                "description": config.server_description,
            },
            "vector_store": {
                "model_name": vector_stats.model_name,
                "total_documents": vector_stats.total_documents,
                "index_dimension": vector_stats.index_dimension,
                "index_type": vector_stats.index_type,
            },
            "content": {
                "total_books": len(books_stats),
                "total_chunks": total_chunks,
                "total_words": total_words,
                "books": books_stats
            },
            "config": {
                "chunk_size": config.chunk_size,
                "chunk_overlap": config.chunk_overlap,
                "default_top_k": config.default_top_k,
                "similarity_threshold": config.similarity_threshold,
            }
        }
        
    except Exception as e:
        logger.error(f"Erro ao obter estat√≠sticas: {str(e)}")
        return {"error": f"Erro ao obter estat√≠sticas: {str(e)}"}


@mcp.tool()
async def list_cv_concepts() -> Dict[str, Any]:
    """
    Lista conceitos de CV dispon√≠veis para consulta
    
    Returns:
        Lista de conceitos organizados por categoria
    """
    if not query_handler:
        return {"error": "Sistema n√£o inicializado"}
    
    try:
        concepts = query_handler.list_available_concepts()
        
        # Organizar conceitos por categoria
        categories = {
            "Fundamentos": [c for c in concepts if any(term in c for term in ['imagem', 'pixel', 'rgb', 'hsv', 'cinza'])],
            "Filtros": [c for c in concepts if 'filtro' in c or any(term in c for term in ['gaussiano', 'sobel', 'laplaciano'])],
            "Segmenta√ß√£o": [c for c in concepts if any(term in c for term in ['segmenta√ß√£o', 'limiariza√ß√£o', 'otsu', 'canny', 'hough'])],
            "Morfologia": [c for c in concepts if any(term in c for term in ['eros√£o', 'dilata√ß√£o', 'abertura', 'fechamento', 'morfologia'])],
            "Caracter√≠sticas": [c for c in concepts if any(term in c for term in ['sift', 'surf', 'orb', 'hog', 'lbp'])],
            "Deep Learning": [c for c in concepts if any(term in c for term in ['cnn', 'yolo', 'rcnn', 'unet'])],
        }
        
        # Remover duplicatas e conceitos n√£o categorizados
        categorized = set()
        for cat_concepts in categories.values():
            categorized.update(cat_concepts)
        
        uncategorized = [c for c in concepts if c not in categorized]
        if uncategorized:
            categories["Outros"] = uncategorized
        
        return {
            "total_concepts": len(concepts),
            "categories": categories,
            "all_concepts": sorted(concepts)
        }
        
    except Exception as e:
        logger.error(f"Erro ao listar conceitos: {str(e)}")
        return {"error": f"Erro ao listar conceitos: {str(e)}"}


# ============================================================================
# FUN√á√ÉO PRINCIPAL
# ============================================================================

async def main():
    """Fun√ß√£o principal do servidor MCP"""
    logger.info(f"üîß Iniciando {config.server_name} v{config.server_version}")
    
    # Inicializar sistema
    success = await initialize_system()
    
    if not success:
        logger.error("‚ùå Falha na inicializa√ß√£o do sistema")
        sys.exit(1)
    
    logger.info("‚úÖ CV Reference MCP Server pronto!")
    logger.info("üì° Aguardando conex√µes MCP...")
    
    # O FastMCP cuida do resto
    return mcp


def run_server():
    """Executa o servidor MCP"""
    try:
        app = asyncio.run(main())
        return app
    except KeyboardInterrupt:
        logger.info("üõë Servidor interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro fatal no servidor: {str(e)}")
        sys.exit(1)


# Inst√¢ncia do app para uso externo
app = mcp

if __name__ == "__main__":
    run_server()